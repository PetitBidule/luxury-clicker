#!/usr/bin/env node

// Script d'installation des d√©pendances de paiement
// Ex√©cutez ce script pour installer automatiquement les packages n√©cessaires

import { execSync } from 'child_process';
import { readFileSync, writeFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üöÄ Installation des d√©pendances de paiement pour Luxury Clicker...\n');

// Liste des d√©pendances √† installer
const paymentDependencies = [
  'stripe',
  'paypal-rest-sdk',
  'node-fetch'
];

const devDependencies = [
  'nodemon'
];

try {
  // V√©rifier si package.json existe
  const packagePath = join(__dirname, 'package.json');
  const packageJson = JSON.parse(readFileSync(packagePath, 'utf8'));
  
  console.log('üì¶ V√©rification des d√©pendances existantes...');
  
  // V√©rifier les d√©pendances manquantes
  const missingDeps = paymentDependencies.filter(dep => !packageJson.dependencies[dep]);
  const missingDevDeps = devDependencies.filter(dep => !packageJson.devDependencies[dep]);
  
  if (missingDeps.length === 0 && missingDevDeps.length === 0) {
    console.log('‚úÖ Toutes les d√©pendances de paiement sont d√©j√† install√©es !');
    return;
  }
  
  // Installer les d√©pendances manquantes
  if (missingDeps.length > 0) {
    console.log(`üì• Installation des d√©pendances: ${missingDeps.join(', ')}`);
    execSync(`npm install ${missingDeps.join(' ')}`, { stdio: 'inherit' });
  }
  
  if (missingDevDeps.length > 0) {
    console.log(`üì• Installation des d√©pendances de d√©veloppement: ${missingDevDeps.join(', ')}`);
    execSync(`npm install --save-dev ${missingDevDeps.join(' ')}`, { stdio: 'inherit' });
  }
  
  console.log('\n‚úÖ Installation termin√©e avec succ√®s !');
  
  // Mettre √† jour package.json avec les scripts de paiement
  console.log('\nüîß Mise √† jour des scripts...');
  
  if (!packageJson.scripts['dev:payment']) {
    packageJson.scripts['dev:payment'] = 'concurrently "npm run server" "npm run dev"';
  }
  
  if (!packageJson.scripts['test:payment']) {
    packageJson.scripts['test:payment'] = 'node test-payment-api.js';
  }
  
  writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ Scripts mis √† jour !');
  
  // Cr√©er le fichier .env s'il n'existe pas
  const envPath = join(__dirname, 'server', '.env');
  const envExamplePath = join(__dirname, 'server', 'env.payment.example');
  
  try {
    readFileSync(envPath, 'utf8');
    console.log('‚úÖ Fichier .env existe d√©j√†');
  } catch (error) {
    console.log('üìù Cr√©ation du fichier .env...');
    
    try {
      const envExample = readFileSync(envExamplePath, 'utf8');
      writeFileSync(envPath, envExample);
      console.log('‚úÖ Fichier .env cr√©√© √† partir de env.payment.example');
      console.log('‚ö†Ô∏è  N\'oubliez pas de configurer vos vraies cl√©s d\'API !');
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible de cr√©er .env automatiquement');
      console.log('   Copiez manuellement server/env.payment.example vers server/.env');
    }
  }
  
  console.log('\nüéâ Configuration termin√©e !');
  console.log('\nüìã Prochaines √©tapes:');
  console.log('   1. Configurez vos cl√©s d\'API dans server/.env');
  console.log('   2. Lancez le serveur: npm run dev:payment');
  console.log('   3. Testez l\'API: npm run test:payment');
  console.log('   4. Int√©grez avec votre prestataire de paiement');
  
} catch (error) {
  console.error('‚ùå Erreur lors de l\'installation:', error.message);
  process.exit(1);
}
